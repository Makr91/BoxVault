#!/bin/bash
set -e

# Create system user and group
if ! getent passwd boxvault > /dev/null 2>&1; then
    adduser --system --group --home /opt/boxvault \
            --no-create-home --shell /usr/sbin/nologin \
            --gecos "BoxVault system user" boxvault
fi

# Create /etc/boxvault directory if it doesn't exist
mkdir -p /etc/boxvault

# Set ownership and permissions
chown -R boxvault:boxvault /opt/boxvault
chown -R boxvault:boxvault /var/lib/boxvault
chown -R boxvault:boxvault /var/log/boxvault
chown -R boxvault:boxvault /etc/boxvault


# Handle configuration files properly for fresh installs vs upgrades
case "$1" in
    configure)
        if [ -z "$2" ]; then
            # Fresh install (no previous version)
            echo "Fresh installation detected"
            
            # Install default config files from templates only if they don't exist
            for config_file in app.config.yaml auth.config.yaml db.config.yaml mail.config.yaml; do
                if [ ! -f "/etc/boxvault/$config_file" ]; then
                    if [ -f "/opt/boxvault/config-templates/$config_file" ]; then
                        cp "/opt/boxvault/config-templates/$config_file" "/etc/boxvault/$config_file"
                        chown boxvault:boxvault "/etc/boxvault/$config_file"
                        echo "Installed default $config_file from template"
                    fi
                fi
            done
            
            # Only generate JWT secret if config file has the default placeholder
            if [ -f /etc/boxvault/auth.config.yaml ]; then
                if grep -q "CHANGE_THIS_SECRET_KEY_IN_PRODUCTION" /etc/boxvault/auth.config.yaml; then
                    JWT_SECRET=$(openssl rand -hex 32)
                    sed -i "s/CHANGE_THIS_SECRET_KEY_IN_PRODUCTION/${JWT_SECRET}/g" /etc/boxvault/auth.config.yaml
                    echo "Generated and updated JWT secret in auth.config.yaml"
                fi
            fi
        else
            # Upgrade (previous version exists) - existing configs are automatically preserved
            echo "Upgrade from version $2 detected - preserving all existing configuration files"
            echo "Configuration files in /etc/boxvault/ will NOT be modified"
            echo "Database files in /var/lib/boxvault/ will NOT be modified"
            echo "Configuration templates are available in /opt/boxvault/config-templates/ for reference"
        fi
        ;;
esac

# Initialize directories for BoxVault
mkdir -p /var/lib/boxvault/uploads
mkdir -p /var/log/boxvault
mkdir -p /etc/boxvault/ssl
chown boxvault:boxvault /var/lib/boxvault/uploads
chown boxvault:boxvault /var/log/boxvault
chown boxvault:boxvault /etc/boxvault/ssl
chmod 700 /etc/boxvault/ssl

# Install Certbot hook if Certbot is already present
if [ -d "/etc/letsencrypt/renewal-hooks/deploy" ]; then
    echo "Certbot detected - installing BoxVault certificate renewal hook"
    
    # Copy hook script to Certbot renewal hooks directory
    if [ -f "/opt/boxvault/scripts/certbot-deploy-hook.sh" ]; then
        cp /opt/boxvault/scripts/certbot-deploy-hook.sh \
           /etc/letsencrypt/renewal-hooks/deploy/boxvault-cert-deploy.sh
        chmod 755 /etc/letsencrypt/renewal-hooks/deploy/boxvault-cert-deploy.sh
        echo "BoxVault Certbot integration installed successfully"
        echo "Certificates will be automatically updated when renewed via Certbot"
    else
        echo "Warning: BoxVault Certbot hook script not found"
    fi
else
    echo "Certbot not detected - manual certificate management will be required"
    echo "If you install Certbot later, BoxVault will provide integration instructions"
fi

# Generate setup token only on fresh installation
case "$1" in
    configure)
        if [ -z "$2" ]; then
            # Fresh install only - generate setup token
            SETUP_TOKEN=$(openssl rand -hex 32)
            echo "$SETUP_TOKEN" > /etc/boxvault/setup.token
            chown boxvault:boxvault /etc/boxvault/setup.token
            chmod 600 /etc/boxvault/setup.token
            SHOW_SETUP_TOKEN=true
        else
            # Upgrade - preserve existing setup token
            if [ -f /etc/boxvault/setup.token ]; then
                echo "Preserving existing setup token"
                SETUP_TOKEN=$(cat /etc/boxvault/setup.token)
                SHOW_SETUP_TOKEN=false
            else
                # Upgrade but no setup token exists - generate one
                SETUP_TOKEN=$(openssl rand -hex 32)
                echo "$SETUP_TOKEN" > /etc/boxvault/setup.token
                chown boxvault:boxvault /etc/boxvault/setup.token
                chmod 600 /etc/boxvault/setup.token
                SHOW_SETUP_TOKEN=true
            fi
        fi
        ;;
esac

# Function to extract port from config file
get_port_from_config() {
    local port_key="$1"
    local config_file="/etc/boxvault/app.config.yaml"
    
    if [ -f "$config_file" ]; then
        # Extract port value using grep and sed
        grep -A 2 "$port_key:" "$config_file" | grep "value:" | sed 's/.*value: *\([0-9]*\).*/\1/' | head -1
    else
        echo ""
    fi
}

# Get configured ports
HTTP_PORT=$(get_port_from_config "api_listen_port_unencrypted")
HTTPS_PORT=$(get_port_from_config "api_listen_port_encrypted")

# Set default ports if not found in config
HTTP_PORT=${HTTP_PORT:-80}
HTTPS_PORT=${HTTPS_PORT:-443}

# Build access URLs
if [ "$HTTP_PORT" = "80" ]; then
    HTTP_URL="http://localhost"
else
    HTTP_URL="http://localhost:$HTTP_PORT"
fi

if [ "$HTTPS_PORT" = "443" ]; then
    HTTPS_URL="https://localhost"
else
    HTTPS_URL="https://localhost:$HTTPS_PORT"
fi

# Reload systemd daemon
systemctl daemon-reload

echo ""
echo "======================================================================"
if [ -z "$2" ]; then
    echo "BoxVault has been installed successfully!"
    echo ""
    if [ "$SHOW_SETUP_TOKEN" = "true" ]; then
        echo "SETUP TOKEN (save this for initial configuration):"
        echo "  $SETUP_TOKEN"
        echo ""
    fi
    echo "Next steps:"
    echo "1. Start the service: sudo systemctl enable --now boxvault"
    echo "2. Access BoxVault at: $HTTP_URL or $HTTPS_URL"
    if [ "$SHOW_SETUP_TOKEN" = "true" ]; then
        echo "3. Use the setup token above for initial configuration"
    else
        echo "3. Use your existing setup token for configuration"
    fi
    echo "4. Check status: systemctl status boxvault"
    echo "5. View logs: journalctl -u boxvault -f"
    echo ""
    echo "Configuration files location: /etc/boxvault/"
    echo "Database location: /var/lib/boxvault/"
else
    echo "BoxVault has been upgraded successfully!"
    echo ""
    echo "Upgrade completed from version $2"
    echo "All existing configuration files and databases have been preserved"
    echo ""
    echo "Next steps:"
    echo "1. Restart the service: systemctl restart boxvault"
    echo "2. Check status: systemctl status boxvault"
    echo "3. View logs: journalctl -u boxvault -f"
    echo ""
    echo "Configuration files location: /etc/boxvault/"
    echo "Database location: /var/lib/boxvault/"
fi
echo "======================================================================"
echo ""

#DEBHELPER#

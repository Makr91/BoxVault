name: Build Debian Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_packages:
    name: Build Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-type: [production, development]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Calculate variables
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "VERSION=$(echo "${{ github.ref_name }}" | sed -e 's/^v//')" >> $GITHUB_ENV
          else
            echo "VERSION=$(node -p "require('./package.json').version")-dev" >> $GITHUB_ENV
          fi
          echo "ARCH=amd64" >> $GITHUB_ENV
          
          if [ "${{ matrix.package-type }}" = "production" ]; then
            echo "PACKAGE_NAME=boxvault" >> $GITHUB_ENV
            echo "DESCRIPTION=BoxVault - Vagrant Box Repository Management System" >> $GITHUB_ENV
            echo "DEPENDS=nodejs (>= 20.0.0), sqlite3, openssl" >> $GITHUB_ENV
            echo "CONFLICTS=" >> $GITHUB_ENV
          else
            echo "PACKAGE_NAME=boxvault-dev" >> $GITHUB_ENV
            echo "DESCRIPTION=BoxVault - Vagrant Box Repository Management System (Development)" >> $GITHUB_ENV
            echo "DEPENDS=nodejs (>= 20.0.0), sqlite3, openssl, npm" >> $GITHUB_ENV
            echo "CONFLICTS=boxvault" >> $GITHUB_ENV
          fi

      - name: Install backend dependencies
        run: |
          cd backend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          cd ..

      - name: Install frontend dependencies
        run: |
          cd frontend
          # Force npm install to resolve npm aliases properly (needed for rollup WASM on OmniOS)
          npm install
          cd ..

      - name: Build frontend (production only)
        if: matrix.package-type == 'production'
        run: |
          cd frontend && npm run build

      - name: Install production dependencies (backend)
        if: matrix.package-type == 'production'  
        run: |
          cd backend
          if [ -f package-lock.json ]; then
            npm ci --omit=dev
          else
            npm install --omit=dev
          fi
          cd ..

      - name: Create package structure
        run: |
          mkdir -p "${PACKAGE_NAME}_${VERSION}_${ARCH}"/{opt/boxvault,etc/boxvault,etc/systemd/system,var/lib/boxvault,var/log/boxvault,DEBIAN}

      - name: Copy application files
        run: |
          # Backend application files
          cp -r backend/app backend/server.js backend/package.json "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/"
          cp -r backend/node_modules "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/"
          
          if [ "${{ matrix.package-type }}" = "production" ]; then
            # Production: pre-built frontend (built into backend/app/views)
            # Frontend files are already in backend/app/views, so they're copied with the backend
          else
            # Development: source files  
            cp -r frontend/src frontend/public frontend/package.json frontend/vite.config.mjs "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/frontend/"
            cp -r frontend/node_modules "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/frontend/"
            # Restore all backend dependencies for dev package
            rm -rf "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/node_modules"
            cd backend
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
            cd ..
            cp -r backend/node_modules "${PACKAGE_NAME}_${VERSION}_${ARCH}/opt/boxvault/"
          fi
          
          # Configuration files
          cp packaging/config/app.config.yaml "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/boxvault/"
          cp packaging/config/auth.config.yaml "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/boxvault/"
          cp packaging/config/db.config.yaml "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/boxvault/"
          cp packaging/config/mail.config.yaml "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/boxvault/"
          
          # Systemd service
          cp packaging/DEBIAN/systemd/boxvault.service "${PACKAGE_NAME}_${VERSION}_${ARCH}/etc/systemd/system/"
          
          # DEBIAN control files
          cp packaging/DEBIAN/{postinst,prerm,postrm} "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN/"

      - name: Create control file
        run: |
          cat > "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN/control" << EOF
          Package: ${PACKAGE_NAME}
          Version: ${VERSION}
          Section: web
          Priority: optional
          Architecture: ${ARCH}
          Maintainer: BoxVault Team <support@boxvault.io>
          Depends: ${DEPENDS}
          $([ -n "${CONFLICTS}" ] && echo "Conflicts: ${CONFLICTS}")
          Description: ${DESCRIPTION}
           Comprehensive Vagrant box repository management system that provides
           a web interface for managing, organizing, and distributing Vagrant
           boxes across teams and organizations with multi-organization support,
           role-based access control, and RESTful API for automation.
          Homepage: https://github.com/Makr91/BoxVault
          EOF

      - name: Set proper permissions
        run: |
          # Set directory and file permissions (following tutorials)
          find "${PACKAGE_NAME}_${VERSION}_${ARCH}" -type d -exec chmod 755 {} \;
          find "${PACKAGE_NAME}_${VERSION}_${ARCH}" -type f -exec chmod 644 {} \;
          
          # Make DEBIAN scripts executable
          chmod 755 "${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN"/{postinst,prerm,postrm}

      - name: Build DEB package
        run: |
          # Build .deb package (dpkg-deb from examples)
          dpkg-deb --build "${PACKAGE_NAME}_${VERSION}_${ARCH}" "${PACKAGE_NAME}_${VERSION}_${ARCH}.deb"

      - name: Test package info
        run: |
          # Show package information
          dpkg-deb --info "${PACKAGE_NAME}_${VERSION}_${ARCH}.deb"
          dpkg-deb --contents "${PACKAGE_NAME}_${VERSION}_${ARCH}.deb"

      - name: Release packages
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          files: "*.deb"
          generate_release_notes: true

      - name: Upload artifacts (for non-tag builds)
        if: github.ref_type != 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: "debian-packages-${{ matrix.package-type }}"
          path: "*.deb"
          retention-days: 7
